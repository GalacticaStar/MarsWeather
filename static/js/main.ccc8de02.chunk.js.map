{"version":3,"sources":["InSight/InSight.js","Weather/Weather.js","WeatherBox/WeatherBox.js","App/App.js","serviceWorker.js","index.js"],"names":["jsonResponse","Insight","data","a","endpoint","fetch","response","ok","json","console","log","getData","minTemps","then","days","sol_keys","map","sol","AT","mn","Weather","this","props","fahrenheit","high","Math","round","maxTemp","low","minTemp","className","React","Component","WeatherBox","solsList","key","mx","tsymbol","App","state","latestSol","avTemp","tempSymbol","insightData","bind","toggleTemp","length","latestAvTemp","av","setState","window","addEventListener","event","onClick","type","for","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ccc8de02.chunk.js","sourcesContent":["// Retrieve your Access Token from NASA's Insight Pages for free.\r\nconst accessToken = 'l6HOudBAKvL1AHq28kh06WDtm5IwT28djCHNG2gZ'; //Your Access Token here.\r\nlet jsonResponse;\r\n\r\nexport const Insight =  {\r\n\r\n    data() {\r\n\r\n        if (jsonResponse) {\r\n            return jsonResponse;\r\n        }\r\n\r\n        const getData = async () => {\r\n            const endpoint = `https://api.nasa.gov/insight_weather/?api_key=${accessToken}&feedtype=json&ver=1.0`;\r\n\r\n            try {\r\n    \r\n                const response = await fetch(endpoint);\r\n    \r\n                if (response.ok) {\r\n                    jsonResponse = await response.json();\r\n                    console.log(jsonResponse);\r\n                    return jsonResponse;\r\n                }\r\n    \r\n            } catch(error) {\r\n                console.log(`There was an error in fetch: ${error}`);\r\n            };\r\n        };\r\n\r\n        return getData();\r\n    },\r\n\r\n    minTemps() {\r\n        Insight.data()\r\n        .then(jsonResponse => {\r\n            const days = jsonResponse.sol_keys;\r\n            const minTemps = {};\r\n            days.map(sol => {\r\n                return minTemps[sol] = jsonResponse[sol].AT.mn; \r\n            });\r\n\r\n            return minTemps;\r\n        })\r\n    }\r\n\r\n};","import React from 'react';\r\nimport './Weather.css';\r\n\r\nexport class Weather extends React.Component {\r\n\r\n\r\n\r\n    render() {\r\n        if (!this.props.fahrenheit) {\r\n            return (\r\n                <div className=\"weather\">\r\n                    <h3>Sol {this.props.sol}</h3>\r\n                    <p className=\"line-seperator\"></p>\r\n                    <p>High: {Math.round(this.props.maxTemp)}&deg;c</p>\r\n                    <p>Low: {Math.round(this.props.minTemp)}&deg;c</p>\r\n                </div>\r\n            );\r\n        } else {\r\n            const high = Math.round((this.props.maxTemp * 1.8) + 32);\r\n            const low = Math.round((this.props.minTemp * 1.8) + 32);\r\n            return (\r\n                <div className=\"weather\">\r\n                    <h3>Sol {this.props.sol}</h3>\r\n                    <p className=\"line-seperator\"></p>\r\n                    <p>High: {high}&deg;f</p>\r\n                    <p>Low: {low}&deg;f</p>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { Weather } from '../Weather/Weather';\r\nimport './WeatherBox.css';\r\n\r\nexport class WeatherBox extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"weather-box\">\r\n                {this.props.solsList.map(sol => {\r\n                    return <Weather key={sol} sol={sol} minTemp={this.props.data[sol].AT.mn}\r\n                                    maxTemp={this.props.data[sol].AT.mx} fahrenheit={this.props.fahrenheit}\r\n                                    tsymbol={this.props.tsymbol}/>\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { Insight } from '../InSight/InSight';\r\nimport { WeatherBox } from '../WeatherBox/WeatherBox';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: {},\r\n      solsList: [],\r\n      latestSol: '',\r\n      avTemp: '',\r\n      fahrenheit: false,\r\n      tempSymbol: 'c',\r\n    }\r\n\r\n\r\n    this.insightData = this.insightData.bind(this);\r\n    this.fahrenheit = this.fahrenheit.bind(this);\r\n    this.toggleTemp = this.toggleTemp.bind(this);\r\n  }\r\n\r\n  insightData() {\r\n    Insight.data()\r\n    .then(jsonResponse => {\r\n      const solsList = jsonResponse.sol_keys;\r\n      const solLength = solsList.length;\r\n      const latestSol = solsList[solLength-1];\r\n      const latestAvTemp = Math.round(jsonResponse[latestSol].AT.av);\r\n      \r\n\r\n      this.setState({\r\n        data: jsonResponse,\r\n        latestSol: latestSol,\r\n        avTemp: latestAvTemp,\r\n        solsList: solsList\r\n      })\r\n    });\r\n  }\r\n\r\n  fahrenheit() {\r\n    const avTemp = Math.round((this.state.avTemp * 1.8) + 32);\r\n    this.setState({\r\n      avTemp: avTemp,\r\n      fahrenheit: true,\r\n      tempSymbol: 'f'\r\n    })\r\n  }\r\n\r\n  toggleTemp() {\r\n    if (this.state.fahrenheit) {\r\n      const avTemp = Math.round((this.state.avTemp - 32) / 1.8);\r\n      this.setState({\r\n        avTemp: avTemp,\r\n        fahrenheit: false,\r\n        tempSymbol: 'c',\r\n      })\r\n    } else {\r\n      this.fahrenheit();\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('load', (event) => {\r\n      this.insightData();\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"welcome\">\r\n        <h1>Welcome to Elysium Planitia</h1>\r\n        <div className=\"welcome-info\">\r\n          <p>Home to NASA's InSight mission on Mars!</p>\r\n          <p>The latest data is from Sol: {this.state.latestSol}. </p>\r\n    <p>Today the Average Temperature is: {this.state.avTemp}&deg;{this.state.tempSymbol}</p>\r\n          <div className=\"toggle\">\r\n            <input onClick={this.toggleTemp} type=\"checkbox\" />\r\n            <label for=\"\" className=\"onbtn\">&deg;c</label>\r\n            <label for=\"\" className=\"offbtn\">&deg;f</label>\r\n          </div>\r\n        </div>\r\n        <WeatherBox data={this.state.data} fahrenheit={this.state.fahrenheit} \r\n                    tsymbol={this.state.tempSymbol}  solsList={this.state.solsList} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}