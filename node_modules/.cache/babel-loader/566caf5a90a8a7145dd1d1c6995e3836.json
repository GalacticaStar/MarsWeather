{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\mrken\\\\Documents\\\\GitHub\\\\MarsWeather\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\mrken\\\\Documents\\\\GitHub\\\\MarsWeather\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";// Retrieve your Access Token from NASA's Insight Pages for free.\nvar accessToken='l6HOudBAKvL1AHq28kh06WDtm5IwT28djCHNG2gZ';//Your Access Token here.\nvar jsonResponse;export var Insight={data:function data(){if(jsonResponse){return jsonResponse;}var getData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var endpoint,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:endpoint=\"https://api.nasa.gov/insight_weather/?api_key=\".concat(accessToken,\"&feedtype=json&ver=1.0\");_context.prev=1;_context.next=4;return fetch(endpoint);case 4:response=_context.sent;if(!response.ok){_context.next=11;break;}_context.next=8;return response.json();case 8:jsonResponse=_context.sent;console.log(jsonResponse);return _context.abrupt(\"return\",jsonResponse);case 11:_context.next=16;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](1);console.log(\"There was an error in fetch: \".concat(_context.t0));case 16:;case 17:case\"end\":return _context.stop();}}},_callee,null,[[1,13]]);}));return function getData(){return _ref.apply(this,arguments);};}();return getData();},minTemps:function minTemps(){Insight.data().then(function(jsonResponse){var days=jsonResponse.sol_keys;var minTemps={};days.map(function(sol){return minTemps[sol]=jsonResponse[sol].AT.mn;});return minTemps;});}};","map":{"version":3,"sources":["C:/Users/mrken/Documents/GitHub/MarsWeather/src/InSight/InSight.js"],"names":["accessToken","jsonResponse","Insight","data","getData","endpoint","fetch","response","ok","json","console","log","minTemps","then","days","sol_keys","map","sol","AT","mn"],"mappings":"qVAAA;AACA,GAAMA,CAAAA,WAAW,CAAG,0CAApB,CAAgE;AAChE,GAAIC,CAAAA,YAAJ,CAEA,MAAO,IAAMC,CAAAA,OAAO,CAAI,CAEpBC,IAFoB,gBAEb,CAEH,GAAIF,YAAJ,CAAkB,CACd,MAAOA,CAAAA,YAAP,CACH,CAED,GAAMG,CAAAA,OAAO,0FAAG,yJACNC,QADM,yDACsDL,WADtD,iEAKeM,CAAAA,KAAK,CAACD,QAAD,CALpB,QAKFE,QALE,mBAOJA,QAAQ,CAACC,EAPL,gDAQiBD,CAAAA,QAAQ,CAACE,IAAT,EARjB,QAQJR,YARI,eASJS,OAAO,CAACC,GAAR,CAAYV,YAAZ,EATI,gCAUGA,YAVH,2FAcRS,OAAO,CAACC,GAAR,sDAdQ,QAeX,CAfW,qEAAH,kBAAPP,CAAAA,OAAO,0CAAb,CAkBA,MAAOA,CAAAA,OAAO,EAAd,CACH,CA3BmB,CA6BpBQ,QA7BoB,oBA6BT,CACPV,OAAO,CAACC,IAAR,GACCU,IADD,CACM,SAAAZ,YAAY,CAAI,CAClB,GAAMa,CAAAA,IAAI,CAAGb,YAAY,CAACc,QAA1B,CACA,GAAMH,CAAAA,QAAQ,CAAG,EAAjB,CACAE,IAAI,CAACE,GAAL,CAAS,SAAAC,GAAG,CAAI,CACZ,MAAOL,CAAAA,QAAQ,CAACK,GAAD,CAAR,CAAgBhB,YAAY,CAACgB,GAAD,CAAZ,CAAkBC,EAAlB,CAAqBC,EAA5C,CACH,CAFD,EAIA,MAAOP,CAAAA,QAAP,CACH,CATD,EAUH,CAxCmB,CAAjB","sourcesContent":["// Retrieve your Access Token from NASA's Insight Pages for free.\r\nconst accessToken = 'l6HOudBAKvL1AHq28kh06WDtm5IwT28djCHNG2gZ'; //Your Access Token here.\r\nlet jsonResponse;\r\n\r\nexport const Insight =  {\r\n\r\n    data() {\r\n\r\n        if (jsonResponse) {\r\n            return jsonResponse;\r\n        }\r\n\r\n        const getData = async () => {\r\n            const endpoint = `https://api.nasa.gov/insight_weather/?api_key=${accessToken}&feedtype=json&ver=1.0`;\r\n\r\n            try {\r\n    \r\n                const response = await fetch(endpoint);\r\n    \r\n                if (response.ok) {\r\n                    jsonResponse = await response.json();\r\n                    console.log(jsonResponse);\r\n                    return jsonResponse;\r\n                }\r\n    \r\n            } catch(error) {\r\n                console.log(`There was an error in fetch: ${error}`);\r\n            };\r\n        };\r\n\r\n        return getData();\r\n    },\r\n\r\n    minTemps() {\r\n        Insight.data()\r\n        .then(jsonResponse => {\r\n            const days = jsonResponse.sol_keys;\r\n            const minTemps = {};\r\n            days.map(sol => {\r\n                return minTemps[sol] = jsonResponse[sol].AT.mn; \r\n            });\r\n\r\n            return minTemps;\r\n        })\r\n    }\r\n\r\n};"]},"metadata":{},"sourceType":"module"}